name: DAYS kernel container

on: 
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      KERNEL_RELEASE_NUMBER: 0.1
    strategy:
      matrix:
        python-version: [3.9]

    steps:
      - name: Print github workspace
        run: |
          echo "GITHUB_WORKSPACE = $GITHUB_WORKSPACE"
          echo "github.workspace = ${{ github.workspace }}"
          echo "pr.ref = ${{github.event.pull_request.head.ref}}"
          echo "github.ref = ${{ github.ref }}"
          echo "$GITHUB_CONTEXT"
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
      - name: Checout Kernel code
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          #flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          pytest
      #- name: Release snapshot
      #  id: release-snapshot
      #  uses: actions/create-release@latest
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #  with:
      #    tag_name: ${{env.KERNEL_RELEASE_NUMBER}}.${{github.run_number}}
      #    release_name: ${{env.KERNEL_RELEASE_NUMBER}}.${{github.run_number}}
      #    draft: false
      #    prerelease: false
      - name: Create tag
        uses: actions/github-script@v3
        with:
          github-token: ${{ github.token }}
          script: |
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{env.KERNEL_RELEASE_NUMBER}}.${{github.run_number}}",
              sha: context.sha
            })
      #- name: Login to GitHub container registry
      #  uses: docker/login-action@v1
      #  with:
      #    registry: ghcr.io
      #    username: ${{github.repository_owner}}
      #    password: ${{secrets.GITHUB_TOKEN}}
      - name: Cache for Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{secrets.DOCKER_HUB_USERNAME}}
          password: ${{secrets.DOCKER_HUB_ACCESS_TOKEN}}
      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          push: true
          tags: ${{secrets.DOCKER_HUB_USERNAME}}/kernel:${{env.KERNEL_RELEASE_NUMBER}}.${{github.run_number}}, ${{secrets.DOCKER_HUB_USERNAME}}/kernel:${{env.KERNEL_RELEASE_NUMBER}}-latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
